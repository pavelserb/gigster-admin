const ftp = require('basic-ftp');
const fs = require('fs').promises;
const path = require('path');

class FTPClient {
  constructor() {
    this.client = new ftp.Client();
    this.client.ftp.verbose = false; // –û—Ç–∫–ª—é—á–∞–µ–º verbose –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  }

  async connect() {
    try {
      // FTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const config = {
        host: process.env.FTP_HOST || 'somos.ftp.tools',
        user: process.env.FTP_USER || 'somos_cursor',
        password: process.env.FTP_PASSWORD || 'Pr6LUx9h45',
        port: process.env.FTP_PORT || 21,
        secure: false
      };

      console.log('üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP:', {
        host: config.host,
        user: config.user,
        port: config.port,
        hasPassword: !!config.password
      });

      await this.client.access(config);
      console.log('‚úÖ FTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå FTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
      return false;
    }
  }

  async disconnect() {
    try {
      this.client.close();
      console.log('‚úÖ FTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è FTP:', error.message);
    }
  }

  async uploadFile(localPath, remotePath) {
    try {
      await this.client.uploadFrom(localPath, remotePath);
      console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${localPath} -> ${remotePath}`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${localPath}:`, error.message);
      return false;
    }
  }

  async downloadFile(remotePath, localPath) {
    try {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${remotePath} -> ${localPath}`);
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const localDir = path.dirname(localPath);
      await fs.mkdir(localDir, { recursive: true });
      
      // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
      const relativePath = remotePath.startsWith('/') ? remotePath.slice(1) : remotePath;
      console.log(`üìÅ –ò—Å–ø–æ–ª—å–∑—É—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: ${relativePath}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é FTP
      await this.client.cd('/');
      console.log(`üìÅ –ü–µ—Ä–µ—à–µ–ª –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é FTP`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞ FTP
      try {
        const fileInfo = await this.client.stat(relativePath);
        console.log(`üìÅ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –Ω–∞ FTP: ${relativePath}, —Ä–∞–∑–º–µ—Ä: ${fileInfo.size} –±–∞–π—Ç`);
      } catch (statError) {
        console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ FTP: ${relativePath}`);
        return false;
      }
      
      await this.client.downloadTo(localPath, relativePath);
      console.log(`‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: ${relativePath} -> ${localPath}`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${remotePath}:`, error.message);
      return false;
    }
  }

  async listFiles(remotePath = '/') {
    try {
      console.log(`üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑: ${remotePath}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É
      await this.client.cd(remotePath);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
      const list = await this.client.list();
      
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${list.length}`);
      
      const result = list.map(item => ({
        name: item.name,
        type: item.type === 2 ? 'dir' : 'file', // 2 = –ø–∞–ø–∫–∞, 1 = —Ñ–∞–π–ª
        size: item.size,
        modified: item.modified
      }));
      
      console.log(`‚úÖ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω:`, result.map(f => f.name));
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ ${remotePath}:`, error.message);
      return [];
    }
  }

  async createDirectory(remotePath) {
    try {
      await this.client.ensureDir(remotePath);
      console.log(`‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${remotePath}`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ ${remotePath}:`, error.message);
      return false;
    }
  }

  async deleteFile(remotePath) {
    try {
      await this.client.remove(remotePath);
      console.log(`‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${remotePath}`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${remotePath}:`, error.message);
      return false;
    }
  }
}

module.exports = FTPClient;
