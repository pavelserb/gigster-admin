#!/usr/bin/env node

const fs = require('fs').promises;
const bcrypt = require('bcryptjs');
const path = require('path');

const USERS_FILE = path.join(__dirname, 'users.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
  try {
    const data = await fs.readFile(USERS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
    return { users: [], roles: {} };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function saveUsers(data) {
  try {
    await fs.writeFile(USERS_FILE, JSON.stringify(data, null, 2));
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createUser(username, password, role = 'editor', name = '', email = '') {
  const data = await loadUsers();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const existingUser = data.users.find(user => user.username === username);
  if (existingUser) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return false;
  }
  
  // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
  const hashedPassword = await bcrypt.hash(password, 10);
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const newUser = {
    id: Date.now(),
    username,
    password: hashedPassword,
    role,
    name: name || username,
    email,
    created: new Date().toISOString(),
    active: true
  };
  
  data.users.push(newUser);
  await saveUsers(data);
  
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
  console.log(`   –†–æ–ª—å: ${role}`);
  console.log(`   –ü–∞—Ä–æ–ª—å: ${password}`);
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUser(username) {
  const data = await loadUsers();
  
  const userIndex = data.users.findIndex(user => user.username === username);
  if (userIndex === -1) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
  if (data.users[userIndex].username === 'admin') {
    console.log('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    return false;
  }
  
  data.users.splice(userIndex, 1);
  await saveUsers(data);
  
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É–¥–∞–ª–µ–Ω`);
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
async function changePassword(username, newPassword) {
  const data = await loadUsers();
  
  const user = data.users.find(user => user.username === username);
  if (!user) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  const hashedPassword = await bcrypt.hash(newPassword, 10);
  user.password = hashedPassword;
  
  await saveUsers(data);
  
  console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è ${username} –∏–∑–º–µ–Ω–µ–Ω`);
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function listUsers() {
  const data = await loadUsers();
  
  console.log('\nüìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
  console.log('‚îÄ'.repeat(80));
  
  data.users.forEach(user => {
    const status = user.active ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${user.username} (${user.role})`);
    console.log(`   –ò–º—è: ${user.name}`);
    console.log(`   Email: ${user.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(user.created).toLocaleDateString()}`);
    console.log('');
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
function generatePassword(length = 12) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
  let password = '';
  for (let i = 0; i < length; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2];
  const args = process.argv.slice(3);
  
  switch (command) {
    case 'create':
      if (args.length < 2) {
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node manage-users.js create <username> <password> [role] [name] [email]');
        console.log('–†–æ–ª–∏: admin, editor, viewer');
        return;
      }
      const [username, password, role = 'editor', name = '', email = ''] = args;
      await createUser(username, password, role, name, email);
      break;
      
    case 'delete':
      if (args.length < 1) {
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node manage-users.js delete <username>');
        return;
      }
      await deleteUser(args[0]);
      break;
      
    case 'password':
      if (args.length < 2) {
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node manage-users.js password <username> <new_password>');
        return;
      }
      await changePassword(args[0], args[1]);
      break;
      
    case 'list':
      await listUsers();
      break;
      
    case 'generate':
      const length = args[0] || 12;
      const generatedPassword = generatePassword(parseInt(length));
      console.log(`üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${generatedPassword}`);
      break;
      
    default:
      console.log('üéõÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ARTBAT Prague Admin');
      console.log('');
      console.log('–ö–æ–º–∞–Ω–¥—ã:');
      console.log('  create <username> <password> [role] [name] [email]  - –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('  delete <username>                                  - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('  password <username> <new_password>                - –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å');
      console.log('  list                                               - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      console.log('  generate [length]                                 - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å');
      console.log('');
      console.log('–ü—Ä–∏–º–µ—Ä—ã:');
      console.log('  node manage-users.js create editor1 mypass123 editor "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" ivan@example.com');
      console.log('  node manage-users.js create viewer1 mypass456 viewer "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤"');
      console.log('  node manage-users.js password editor1 newpassword123');
      console.log('  node manage-users.js generate 16');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  loadUsers,
  saveUsers,
  createUser,
  deleteUser,
  changePassword,
  generatePassword
};
