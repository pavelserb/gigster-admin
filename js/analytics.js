// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
class EventTracker {
  constructor() {
    this.isInitialized = false;
    this.sessionStart = Date.now();
    this.init();
  }
  
  init() {
    console.log('EventTracker.init() –≤—ã–∑–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ EventTracker
    if (this.isInitialized) {
      console.log('‚ö†Ô∏è EventTracker —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
      return;
    }
    
    this.setupEventListeners();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –°–†–ê–ó–£
    this.setupEventTracking();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–∏–∫—Å–µ–ª–µ–π
    this.checkPixelsLoaded();
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏–∫—Å–µ–ª–µ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.waitForPixels();
  }
  
  waitForPixels() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π
    console.log('–ü–∏–∫—Å–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', {
      fbq: !!window.fbq,
      ttq: !!window.ttq,
      dataLayer: !!window.dataLayer
    });
    
    this.isInitialized = true;
    
    // PageView –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∏–∫—Å–µ–ª–µ–π
    // UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ PixelLoader
    console.log('EventTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, PageView –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ PixelLoader');
  }
  
  setupEventTracking() {
    console.log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...');
    
    // –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è TicketButtonClick
    this.setupUniversalTicketLinks();
  }
  

  

  
    setupUniversalTicketLinks() {
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    document.addEventListener('click', (e) => {
      if (e.target.hasAttribute('data-track') && e.target.getAttribute('data-track') === 'TicketButtonClick') {
        console.log('üéØ –ö–ª–∏–∫ –ø–æ TicketButtonClick:', e.target.textContent.trim());
        
        if (window.fbq) {
          const clickId = Math.random().toString(36).substr(2, 9);
          const timestamp = Date.now();
          const eventData = {
            button_text: e.target.textContent.trim(),
            timestamp: timestamp,
            click_id: clickId
          };
          
          console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TicketButtonClick —Å ID:', clickId, 'timestamp:', timestamp);
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
          setTimeout(() => {
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ Lead –≤–º–µ—Å—Ç–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ
            window.fbq('track', 'Lead', eventData);
            console.log('‚úÖ Lead —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å ID:', clickId, 'timestamp:', timestamp);
          }, 50);
        }
      }
    });
    
    console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–π event listener –¥–æ–±–∞–≤–ª–µ–Ω');
  }
  

  

  

  

  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
  track(eventName, parameters = {}) {
    console.log('EventTracker.track() –≤—ã–∑–≤–∞–Ω:', eventName, parameters);
    
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è, –ø–æ–∫–∞ –ø–∏–∫—Å–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!this.isInitialized) {
      console.log('EventTracker –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ:', eventName);
      return;
    }
    
    const eventData = {
      event: eventName,
      timestamp: Date.now(),
      url: window.location.href,
      language: window.PixelLoader ? window.PixelLoader.getLanguage() : 'en',
      session_id: this.getSessionId(),
      ...parameters
    };
    
    // Google Analytics 4
    if (window.gtag) {
      this.trackGA4(eventName, parameters);
    }
    
    // Meta Pixel
    if (window.fbq) {
      this.trackMeta(eventName, parameters);
    }
    
    // TikTok Pixel
    if (window.ttq) {
      this.trackTikTok(eventName, parameters);
    }
    
    // GTM (–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π)
    if (window.dataLayer) {
      window.dataLayer.push(eventData);
    }
  }
  
  // GA4 —Å–æ–±—ã—Ç–∏—è
  trackGA4(eventName, params) {
    // PageView –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ PixelLoader
    console.log('GA4: —Å–æ–±—ã—Ç–∏–µ', eventName, params);
  }
  
  // Meta Pixel —Å–æ–±—ã—Ç–∏—è
  trackMeta(eventName, params) {
    // PageView –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ PixelLoader
    console.log('Meta: —Å–æ–±—ã—Ç–∏–µ', eventName, params);
  }
  

  
  // TikTok Pixel —Å–æ–±—ã—Ç–∏—è
  trackTikTok(eventName, params) {
    // PageView –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ PixelLoader
    console.log('TikTok: —Å–æ–±—ã—Ç–∏–µ', eventName, params);
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getSessionId() {
    let sessionId = localStorage.getItem('analytics_session_id');
    if (!sessionId) {
      sessionId = 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      localStorage.setItem('analytics_session_id', sessionId);
    }
    return sessionId;
  }
  
  getUrlParameter(name) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(name);
  }
  
  getUTMParams() {
    return {
      utm_source: this.getUrlParameter('utm_source'),
      utm_medium: this.getUrlParameter('utm_medium'),
      utm_campaign: this.getUrlParameter('utm_campaign'),
      utm_content: this.getUrlParameter('utm_content'),
      utm_term: this.getUrlParameter('utm_term')
    };
  }
  
  checkPixelsLoaded() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–∏–∫—Å–µ–ª–µ–π
    const pixels = {
      gtag: typeof window.gtag !== 'undefined',
      fbq: typeof window.fbq !== 'undefined',
      ttq: typeof window.ttq !== 'undefined',
      dataLayer: typeof window.dataLayer !== 'undefined'
    };
    
    console.log('Pixels loaded:', pixels);
  }
  
  setupEventListeners() {
    // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    // this.trackSectionViews();
  }
  
  // Track ticket clicks
  setupTicketTracking() {
    // Primary tickets button (floating)
    const ticketsPrimary = document.getElementById('ticketsPrimary');
    if (ticketsPrimary) {
      ticketsPrimary.addEventListener('click', () => {
        this.track('ticket_click', {
          position: 'floating',
          vendor_name: 'primary'
        });
      });
    }
    
    // Tickets section button
    const ticketsSectionBtn = document.querySelector('#tickets .btn');
    if (ticketsSectionBtn) {
      ticketsSectionBtn.addEventListener('click', () => {
        this.track('ticket_click', {
          position: 'section',
          vendor_name: 'primary'
        });
      });
    }
  }
  

  
  trackSectionViews() {
    const sections = ['hero', 'about', 'artists', 'tickets', 'location', 'faqs', 'connect'];
    const observedSections = new Set();
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionName = entry.target.id;
          if (!observedSections.has(sectionName)) {
            observedSections.add(sectionName);
            this.track('section_view', {
              section_name: sectionName
            });
          }
        }
      });
    }, { threshold: 0.3 });
    
    sections.forEach(sectionId => {
      const section = document.getElementById(sectionId);
      if (section) {
        observer.observe(section);
      }
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º EventTracker –≥–ª–æ–±–∞–ª—å–Ω–æ
window.EventTracker = EventTracker;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–∫–µ—Ä—É
window.eventTracker = null;

// EventTracker will be initialized by main.js to ensure proper order
// This prevents conflicts and ensures analytics is ready when needed

// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è Facebook –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (window.fbq) {
  const originalFbq = window.fbq;
  window.fbq = function(...args) {
    console.log('Facebook Pixel –≤—ã–∑–≤–∞–Ω:', args);
    return originalFbq.apply(this, args);
  };
}
