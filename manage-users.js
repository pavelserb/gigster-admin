#!/usr/bin/env node

const fs = require('fs').promises;
const bcrypt = require('bcryptjs');
const readline = require('readline');

const USERS_FILE = 'users.json';

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
  try {
    const data = await fs.readFile(USERS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.log('üìù –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    return {
      users: [],
      settings: {
        maxLoginAttempts: 5,
        sessionTimeout: 3600,
        passwordMinLength: 8
      }
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function saveUsers(usersData) {
  await fs.writeFile(USERS_FILE, JSON.stringify(usersData, null, 2));
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤', USERS_FILE);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
async function hashPassword(password) {
  const saltRounds = 10;
  return await bcrypt.hash(password, saltRounds);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
function generateId() {
  return Date.now().toString();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function addUser() {
  console.log('\nüë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('===============================');
  
  const username = await question('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ');
  const email = await question('–í–≤–µ–¥–∏—Ç–µ email: ');
  const password = await question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ');
  const role = await question('–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å (admin/editor): ') || 'editor';
  
  if (!username || !email || !password) {
    console.log('‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!');
    return;
  }
  
  const usersData = await loadUsers();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const existingUser = usersData.users.find(u => u.username === username || u.email === email);
  if (existingUser) {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const hashedPassword = await hashPassword(password);
  const newUser = {
    id: generateId(),
    username,
    email,
    password: hashedPassword,
    role,
    isActive: true,
    createdAt: new Date().toISOString(),
    lastLogin: null
  };
  
  usersData.users.push(newUser);
  await saveUsers(usersData);
  
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  console.log('üìß Email:', email);
  console.log('üîë –†–æ–ª—å:', role);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function removeUser() {
  console.log('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('========================');
  
  const usersData = await loadUsers();
  
  if (usersData.users.length === 0) {
    console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    return;
  }
  
  console.log('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
  usersData.users.forEach((user, index) => {
    console.log(`${index + 1}. ${user.username} (${user.email}) - ${user.role}`);
  });
  
  const userIndex = parseInt(await question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ')) - 1;
  
  if (userIndex < 0 || userIndex >= usersData.users.length) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
    return;
  }
  
  const userToRemove = usersData.users[userIndex];
  
  if (userToRemove.username === 'admin') {
    console.log('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!');
    return;
  }
  
  const confirm = await question(`–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${userToRemove.username}"? (y/N): `);
  
  if (confirm.toLowerCase() === 'y') {
    usersData.users.splice(userIndex, 1);
    await saveUsers(usersData);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!');
  } else {
    console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
async function changePassword() {
  console.log('\nüîë –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è');
  console.log('==================');
  
  const usersData = await loadUsers();
  
  if (usersData.users.length === 0) {
    console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    return;
  }
  
  console.log('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
  usersData.users.forEach((user, index) => {
    console.log(`${index + 1}. ${user.username} (${user.email})`);
  });
  
  const userIndex = parseInt(await question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ')) - 1;
  
  if (userIndex < 0 || userIndex >= usersData.users.length) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
    return;
  }
  
  const user = usersData.users[userIndex];
  const newPassword = await question(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è "${user.username}": `);
  
  if (!newPassword) {
    console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!');
    return;
  }
  
  const hashedPassword = await hashPassword(newPassword);
  user.password = hashedPassword;
  
  await saveUsers(usersData);
  console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function listUsers() {
  console.log('\nüìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('======================');
  
  const usersData = await loadUsers();
  
  if (usersData.users.length === 0) {
    console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    return;
  }
  
  usersData.users.forEach((user, index) => {
    console.log(`${index + 1}. ${user.username} (${user.email})`);
    console.log(`   –†–æ–ª—å: ${user.role}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${user.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(user.createdAt).toLocaleDateString()}`);
    if (user.lastLogin) {
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${new Date(user.lastLogin).toLocaleDateString()}`);
    }
    console.log('');
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMenu() {
  console.log('\nüîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∞–¥–º–∏–Ω–∫–∏ ARTBAT Prague');
  console.log('================================================');
  console.log('1. üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('2. üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('3. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('4. üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å');
  console.log('5. üö™ –í—ã—Ö–æ–¥');
  console.log('');
  
  const choice = await question('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ');
  
  switch (choice) {
    case '1':
      await listUsers();
      break;
    case '2':
      await addUser();
      break;
    case '3':
      await removeUser();
      break;
    case '4':
      await changePassword();
      break;
    case '5':
      console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
      rl.close();
      return;
    default:
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!');
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
  await showMenu();
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async function main() {
  try {
    await showMenu();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    rl.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
rl.on('close', () => {
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
main();
